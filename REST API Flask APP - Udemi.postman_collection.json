{
	"info": {
		"_postman_id": "90008aa9-ee2c-4449-bb24-a834ed8d0a3c",
		"name": "REST API Flask APP - Udemi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23583718"
	},
	"item": [
		{
			"name": "Register & Authenticate",
			"item": [
				{
					"name": "/register Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// For registrate we don't need early saved token\r",
									"postman.clearEnvironmentVariable(\"access_token\");\r",
									"\r",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
									"\r",
									"let jasonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"User created succcessfully\"] = jasonData.message === \"User created successfully.\";\r",
									"\r",
									"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');\r",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === \"application/json\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "test6",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);\r",
									"\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Body contains access_token\"] = responseBody.has(\"access_token\");\r",
									"\r",
									"tests[\"Response time is less than 150ms\"] = responseTime < 150;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"test6\",\r\n    \"password\": \"12345\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test whether a user can register and authenticate successfully."
		},
		{
			"name": "User create store & item",
			"item": [
				{
					"name": "/register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// For registrate we don't need early saved token\r",
									"postman.clearEnvironmentVariable(\"access_token\");\r",
									"\r",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
									"\r",
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"User created succcessfully\"] = jsonData.message === \"User created successfully.\";\r",
									"\r",
									"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');\r",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === \"application/json\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "test",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"test\",\r\n    \"password\": \"12345\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "store/test_store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Store name is returned\"] = jsonData.name === 'test_store';\r",
									"tests[\"Store id is returned\"] = jsonData.id === 1;\r",
									"tests[\"Store items are an empty list\"] = jsonData.items.length === 0;\r",
									"\r",
									"tests[\"Successful POST request\"] = responseCode.code === 201;\r",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
									"\r",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';\r",
									"\r",
									"postman.setEnvironmentVariable(\"store_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test_store\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/store/test_store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"test_store"
							]
						},
						"description": "Create Store with name \\`test_store\\`."
					},
					"response": []
				},
				{
					"name": "/item/test_item in test_store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Item name is returned\"] = jsonData.name === 'test_item';\r",
									"tests[\"Item price is retuned\"] = jsonData.price === 17.99;\r",
									"\r",
									"tests[\"Successful POST ewquest\"] = responseCode.code === 201;\r",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
									"\r",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 17.99,\r\n    \"store_id\": {{store_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/item/test_item",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"test_item"
							]
						},
						"description": "Save test Item to test Store."
					},
					"response": []
				},
				{
					"name": "/stores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Store `test_store` is returned\"] = jsonData.stores[0].name === 'test_store';\r",
									"tests[\"ID of store `test_store` is returned\"] = jsonData.stores[0].id === parseInt(environment.store_id);\r",
									"tests[\"Item `test_item` is returned inside `test_store`\"] = jsonData.stores[0].items[0].name === 'test_item';\r",
									"tests[\"Item `test_item` price is returned inside `test_store`\"] = jsonData.stores[0].items[0].price === 17.99;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/stores",
							"host": [
								"{{url}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item/my_item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Returned name of the item - `test_item`\"] = jsonData.name === \"test_item\";\r",
									"tests[\"Returned price is 17.99\"] = jsonData.price === 17.99;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/item/test_item",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"test_item"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/test_store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Return message `Store deleted`\"] = jsonData.message === \"Store deleted\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/store/test_store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"test_store"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item/test_item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Return message `Item deleted`\"] = jsonData.message === \"Item deleted\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/item/test_item",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"test_item"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}